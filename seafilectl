#!/bin/sh
#
# ---------------------------------------------------------------------------------------
#  Description
# ---------------------------------------------------------------------------------------
#
# Description:
# This is a brief description of my script
#
# Author:
# Jorge Barrientos Poisson
#
# ---------------------------------------------------------------------------------------
#  ChangeLog
# ---------------------------------------------------------------------------------------
#
#  2023.10.10 | Tuning up the DEBUG mode and the user defined functions
#
# ---------------------------------------------------------------------------------------
#  Variables and Settings
# ---------------------------------------------------------------------------------------

SCRIPT_NAME=$( basename $0 )
SCRIPT_VERSION="2023.12.08"

SEAFILE_USER="doctorbarrientos@gmail.com"
SEAFILE_SERVER="/opt/seafile/seafile-server-latest"
SEAFILE_LIBRARIES="$HOME/Documentos/Private/config/lagunagfx/seafile.list"

# ---------------------------------------------------------------------------------------
#  Base functions
# ---------------------------------------------------------------------------------------

usage() {
	printf "usage: %s [-hv] [--debug] -p <path-to-export> <library_id>\n" $SCRIPT_NAME
	printf "         --debug          developer mode\n"
	printf "   -h,   --help           show this help message\n"
	printf "   -v,   --verbose        verbose mode\n"
	printf "         --version        show current version\n"
	printf "   -e,   --export         export a seafile library to disk\n"
	printf "         --batch-export   export all unencrypted libraries in the server\n"
}

version() {
	printf "  * \e[33m%s\e[0m version \e[33m%s\e[0m\n" $SCRIPT_NAME $SCRIPT_VERSION
}

check_args() {
	if [ $# -eq 0 ];
	then
		# script is called with zero arguments 
		usage
		exit 0
	else
		# one or more arguments are used
		while [ "$1" ];
		do
			# list of accepted arguments
			case "$1" in
				# default help option
				"-h"|"--help")
					usage
					exit 0
					;;
				"--version")
					version
					exit 0
					;;
				"--debug")
					DEBUG="TRUE"
					;;
				# all user defined opts handled by user_args
				*)
					user_args "$@"
					;;
			esac
			# removes the first item from the list of given arguments ('$@')
			shift
		done	
	fi
}

# ---------------------------------------------------------------------------------------
#  Standard Functions
# ---------------------------------------------------------------------------------------

defaults() {
	DEFAULT_DEBUG="FALSE"
	DEFAULT_LAST_ARGUMENT_NEEDED="FALSE"
	DEFAULT_BATCH_RENAME="TRUE"

	# conditional oneliners ( if/then/else == []/&&/|| )
	[ -z "$DEBUG" ] && DEBUG="$DEFAULT_DEBUG"
	[ -z "$LAST_ARGUMENT_NEEDED" ] && LAST_ARGUMENT_NEEDED="$DEFAULT_LAST_ARGUMENT_NEEDED"
	[ -z "$BATCH_RENAME" ] && BATCH_RENAME="$DEFAULT_BATCH_RENAME"

}

user_args() {
	case $1 in
		# insert user defined parameters
		"-v"|"--verbose")
			VERBOSE="TRUE"
			;;
		"-e"|"--export")
			ACTION="export"
			EXPORT_PATH_NEEDED="TRUE"
			LAST_ARGUMENT_NEEDED="TRUE"
			;;
		"--batch-export")
			ACTION="batch_export"
			EXPORT_PATH_NEEDED="TRUE"
			;;
		"-p"|"--path")
			check_folder "$2" && EXPORT_PATH="$( echo $2 | sed 's/\/$//' )"
			;;
		*)
			if [ $# -eq 1 ];
			then
				LAST_ARGUMENT="$1"		
			fi
			;;
	esac
}

check_essentials() {

	if [ "$EXPORT_PATH_NEEDED" = "TRUE" ];
	then
		if [ -z "$EXPORT_PATH" ];
		then
			printf "\e[31m-!> ERROR:\e[0m You must provide a valid path to export files (use the -p option).\n"
			exit 1
		fi
	fi

	if [ "$LAST_ARGUMENT_NEEDED" = "TRUE" ];
	then
		if [ -z "$LAST_ARGUMENT" ];
		then
			printf "\e[31m-!> ERROR:\e[0m A last argument must be specified\n"
			exit 1
		fi
	fi
}

action() {
	case $ACTION in 
		"export")
			do_export_library $LAST_ARGUMENT
			;;
		"batch_export")
			do_batch_export
			;;
		*)
			printf "\e[31m-!> ERROR:\e[0m ACTION variable \e[31m%s\e[0m not recognised\n" "$ACTION"
			exit 1
			;;
	esac
}

# ---------------------------------------------------------------------------------------
#  User defined functions
# ---------------------------------------------------------------------------------------

check_readable_file() {

	TEST_FILE="$1"

	if [ ! -r "$TEST_FILE" ];
	then
		printf "\e[31m-!> ERROR:\e[0m file \e[31m%s\e[0m not found.\n" "$TEST_FILE"
		exit 1
	fi
}

check_folder() {

	TEST_FOLDER="$1"

	if [ ! -r "$TEST_FOLDER" ];
	then
		printf "\e[31m-!> ERROR:\e[0m folder \e[31m%s\e[0m not found.\n" "$TEST_FOLDER"
		exit 1
	fi
}

read_config() {

	CONFIG_FILE="$1"
	
	# remove all empty lines and lines starting with a space
	sed '/^#/d' "$CONFIG_FILE" | sed '/^ /d' | sed '/^$/d'
}

do_export_library() {

	LIBRARY_ID="$1"

	case $DEBUG in
		"FALSE")
			"$SEAFILE_SERVER"/seaf-fsck.sh --export "$EXPORT_PATH" "$LIBRARY_ID"
			;;
		"TRUE")
			printf "\e[34m-!>\e[0m Debugging function \e[34m%s\e[0m :\n" 'do_export_library'
			printf "    \e[34m>\e[0m seaf-fsck.sh --export %s %s \n" "$EXPORT_PATH" "$LIBRARY_ID"
			;;
	esac
}

do_batch_export() {
	
	check_readable_file "$SEAFILE_LIBRARIES"
	for line in $( read_config "$SEAFILE_LIBRARIES" );
	do
		LIBRARY_ID=$( echo "$line" | cut -d , -f 1 | tr -d '"' )
		LIBRARY_NAME=$( echo "$line" | cut -d \, -f 2 | cut -d " " -f 1 | tr -d '"' )
		LIBRARY_PATH="$EXPORT_PATH"/"$( echo $LIBRARY_ID | cut -d '-' -f 1 )"_"$( echo $LIBRARY_NAME | tr _ ' ' )"_"$SEAFILE_USER"

		if [ $DEBUG = "TRUE" ];
		then
				printf "\e[34m-!>\e[0m Debugging function \e[34m%s\e[0m :\n" 'do_batch_export'
				printf "    \e[34m>\e[0m variable LIBRARY_NAME : %s \n" "$LIBRARY_NAME"
				printf "    \e[34m>\e[0m variable LIBRARY_PATH : %s \n" "$LIBRARY_PATH"
		fi

		do_export_library "$LIBRARY_ID"

		# ls -l "$LIBRARY_PATH" | sed 's/^/      /'

		if [ "$BATCH_RENAME" = "TRUE" ];
		then
			SRC=$LIBRARY_PATH
			DST="$EXPORT_PATH"/"$LIBRARY_NAME"
			case $DEBUG in
				"FALSE")
					mv -v "$SRC" "$DST" | sed 's/^/    /'
					;;
				"TRUE")
					printf "    \e[34m>\e[0m rename output\n"
					printf "        from %s\n" "$SRC"
					printf "          to %s\n" "$DST"
					;;
			esac
		fi

	done
}

# ---------------------------------------------------------------------------------------
#  Main block
# ---------------------------------------------------------------------------------------

main() {
	check_args "$@"
	defaults
	check_essentials
	# build_syntax
	version
	action
}

# ---------------------------------------------------------------------------------------
#  Main call
# ---------------------------------------------------------------------------------------

main "$@"
