#!/bin/sh
#
# ---------------------------------------------------------------------------------------
#  Description
# ---------------------------------------------------------------------------------------
#
# Description:
# Converts from .adf Amiga floppy disk image files to gzipped compressed .adz format
#
# Author:
# Jorge Barrientos Poisson
#
# ---------------------------------------------------------------------------------------
#  ChangeLog
# ---------------------------------------------------------------------------------------
#
#  2024.08.24 | 1st revision of this template
#
# ---------------------------------------------------------------------------------------
#  Variables and Settings
# ---------------------------------------------------------------------------------------

SCRIPT_NAME=$( basename $0 )
SCRIPT_VERSION="2024.08.24"

# ---------------------------------------------------------------------------------------
#  Base functions
# ---------------------------------------------------------------------------------------

usage() {
	printf "usage: %s [-h]\n" $SCRIPT_NAME
	printf "         --debug          developer mode\n"
	printf "   -h,   --help           show this help message\n"
	printf "   -v,   --verbose        verbose mode\n"
	printf "         --version        show current version\n"
	printf "         --compress       compress an Amiga Disk File [.adf] file\n"
}

version() {
	printf "  * \e[33m%s\e[0m version \e[33m%s\e[0m\n" $SCRIPT_NAME $SCRIPT_VERSION
}

check_args() {
	if [ $# -eq 0 ];
	then
		# script is called with zero arguments 
		usage
		exit 0
	else
		# one or more arguments are used
		while [ "$1" ];
		do
			# list of accepted arguments
			case "$1" in
				# default help option
				"-h"|"--help")
					usage
					exit 0
					;;
				"--version")
					version
					exit 0
					;;
				"--debug")
					DEBUG="TRUE"
					;;
				# all user defined opts handled by user_args
				*)
					user_args "$@"
					;;
			esac
			# removes the first item from the list of given arguments ('$@')
			shift
		done	
	fi
}

# ---------------------------------------------------------------------------------------
#  Standard Functions
# ---------------------------------------------------------------------------------------

defaults() {
	DEFAULT_DEBUG="FALSE"
	DEFAULT_LAST_ARGUMENT_NEEDED="TRUE"

	# conditional oneliners ( if/then/else == []/&&/|| )
	[ -z $DEBUG ] && DEBUG="$DEFAULT_DEBUG"
	[ -z $LAST_ARGUMENT_NEEDED ] && LAST_ARGUMENT_NEEDED="$DEFAULT_LAST_ARGUMENT_NEEDED"
}

user_args() {
	case $1 in
		# insert user defined parameters
		"-v"|"--verbose")
			VERBOSE="TRUE"
			;;
		"-c"|"--compress")
			ACTION="compress"
			;;
		*)
			if [ $# -eq 1 ];
			then
				LAST_ARGUMENT="$1"		
			fi
			;;
	esac
}

check_essentials() {
	if [ "$LAST_ARGUMENT_NEEDED" = "TRUE" ];
	then
		if [ -z "$LAST_ARGUMENT" ];
		then
			printf "\e[31m-!> ERROR:\e[0m A file must be specified\n"
			exit 1
		else
			# check if a file called as $LAST_ARGUMENT exists and is readable
			check_readable_file "$LAST_ARGUMENT" && FILE="$LAST_ARGUMENT"
		fi
	fi
}

action() {
	case "$ACTION" in 
		"compress")
			do_compress "$FILE"
			;;
		*)
			printf "\e[31m-!> ERROR:\e[0m ACTION variable \e[31m%s\e[0m not recognised\n" "$ACTION"
			exit 1
			;;
	esac
}

# ---------------------------------------------------------------------------------------
#  User defined functions
# ---------------------------------------------------------------------------------------

check_readable_file() {

	TEST_FILE="$1"

	if [ ! -r "$TEST_FILE" ];
	then
		printf "\e[31m-!> ERROR:\e[0m file \e[31m%s\e[0m not found or readable.\n" "$TEST_FILE"
		exit 1
	fi
}

check_folder() {

	TEST_FOLDER="$1"

	if [ ! -r "$TEST_FOLDER" ];
	then
		printf "\e[31m-!> ERROR:\e[0m folder \e[31m%s\e[0m not found.\n" "$TEST_FOLDER"
		exit 1
	fi
}

do_compress() {
	FILE_ADF="$1"
	FILE_ADZ=$( basename "$FILE_ADF" .adf ).adz
	FULLPATH=$( dirname "$FILE_ADF" )

	gzip -9 "$FILE_ADF"

	if [ "$VERBOSE" == "TRUE" ];
	then
		printf "\e[33m-->\e[0m Compressing \e[35m%s\e[0m to %s\n" "$FILE_ADF" "$FILE_ADZ" 
	fi

	mv "$FILE_ADF".gz "$FULLPATH"/"$FILE_ADZ" 
}

# ---------------------------------------------------------------------------------------
#  Main block
# ---------------------------------------------------------------------------------------

main() {
	check_args "$@"
	defaults
	check_essentials
	version # first actual output to the screen
	action
}

# ---------------------------------------------------------------------------------------
#  Main call
# ---------------------------------------------------------------------------------------

main "$@"
