#!/bin/bash
#
# ---------------------------------------------------------------------------------------
#  Description
# ---------------------------------------------------------------------------------------
#
# Description:
# This is a brief description of my script
#
# Author:
# Jorge Barrientos Poisson
#
# ---------------------------------------------------------------------------------------
#  ChangeLog
# ---------------------------------------------------------------------------------------
#
#  2022.10.21 | Added Keyhole Markup Language (.kml) support
#  2022.10.20 | Added GPS eXchange Format (.gpx) support 
#  2022.10.19 | The "--fix" option is complete, which formatted the original .csv data
#  2022.10.18 | 1st draft
#
# ---------------------------------------------------------------------------------------
#  Variables and Settings
# ---------------------------------------------------------------------------------------

SCRIPT_NAME=$( basename $0 )
SCRIPT_VERSION="2022.10.21"

# ---------------------------------------------------------------------------------------
#  Base functions
# ---------------------------------------------------------------------------------------

usage() {
	printf "usage: %s [-h]\n" $SCRIPT_NAME
	printf "         --debug          developer mode\n"
	printf "   -h,   --help           show this help message\n"
	printf "   -v,   --verbose        verbose mode\n"
	printf "         --version        show current version\n"
	printf "   -c,   --clean          only outputs suitable for .csv creation"
	printf "         --fix            extract data from the original .csv (1st step)" 
	printf "   -g,   --gpx            parse a formatted .csv file into GPS eXchange format (.gpx)" 
}

version() {
	[ "$CLEAN" == "FALSE" ] && printf "\e[33m--> \e[36m%s\e[0m version \e[33m%s\e[0m\n" $SCRIPT_NAME $SCRIPT_VERSION
}

check_args() {
	if [ $# -eq 0 ];
	then
		# script is called with zero arguments 
		usage
		exit 0
	else
		# one or more arguments are used
		while [ "$1" ];
		do
			# list of accepted arguments
			case "$1" in
				# default help option
				"-h"|"--help")
					usage
					exit 0
					;;
				"--version")
					version
					exit 0
					;;
				"--debug")
					DEBUG="TRUE"
					;;
				# all user defined opts handled by user_args
				*)
					user_args "$@"
					;;
			esac
			# removes the first item from the list of given arguments ('$@')
			shift
		done	
	fi
}

# ---------------------------------------------------------------------------------------
#  Standard Functions
# ---------------------------------------------------------------------------------------

defaults() {
	DEFAULT_DEBUG="FALSE"
	DEFAULT_LAST_ARGUMENT_NEEDED="TRUE"
	DEFAULT_CLEAN="FALSE"

	# conditional oneliners ( if/then/else == []/&&/|| )
	[ -z $DEBUG ] && DEBUG="$DEFAULT_DEBUG"
	[ -z $LAST_ARGUMENT_NEEDED ] && LAST_ARGUMENT_NEEDED="DEFAULT_LAST_ARGUMENT_NEEDED"
	[ -z $CLEAN ] && CLEAN="$DEFAULT_CLEAN"
}

user_args() {
	case $1 in
		# insert user defined parameters
		"-v"|"--verbose")
			VERBOSE="TRUE"
			;;
		"-c"|"--clean")
			CLEAN="TRUE"
			;;
		"--fix")
			ACTION="fix_csv"
			;;
		"--gpx")
			ACTION="csv2gpx"
			CLEAN="true"
			;;
		"--kml")
			ACTION="csv2kml"
			CLEAN="TRUE"
			;;
		*)
			if [ $# -eq 1 ];
			then
				LAST_ARGUMENT="$1"		
			fi
			;;
	esac
}

check_essentials() {
	if [ -z "$LAST_ARGUMENT" ];
	then
		printf "\e[31m-!> ERROR:\e[0m A last argument must be specified\n"
		exit 1
	else
		if [ ! -r "$LAST_ARGUMENT" ];
		then
			printf "\e[31m-!>\e[0m File not found or not readable : \e[31m%s\e[0m\n" $LAST_ARGUMENT
			exit 1
		else
			# is it a valid text file ?
			if [ ! -z "$( file -b "$LAST_ARGUMENT" | grep UTF-8 )" ];
			then
				[ "$CLEAN" == "FALSE" ]	&& printf "\e[33m-->\e[0m File \e[36m%s\e[0m is a valid UTF-8 encoded file\n" "$LAST_ARGUMENT"
				COORDINATES_CSV="$LAST_ARGUMENT"
			else
				printf "\e[31m-!> ERROR:\e[0m File \e[31m%s\e[0m is not a valid UTF-8 encoded file\n" "$LAST_ARGUMENT"
				exit 1
			fi
		fi
	fi
}

action() {
	# Execute standard OR debug version of the script
	if [ "$DEBUG" == "FALSE" ];
	then
		case $ACTION in 
			"fix_csv")
				parser_raw2csv
				exit 0
				;;
			"csv2gpx")
				parser_csv2gpx
				exit 0
				;;
			"csv2kml")
				parser_csv2kml
				exit 0
				;;
		esac
	else
		printf "\e[31m-!>\e[0m Running in \e[31mDEBUG\e[0m mode\n\n" $SCRIPT_NAME
	fi
}

# ---------------------------------------------------------------------------------------
#  User defined functions
# ---------------------------------------------------------------------------------------

capitalize() {
	printf $1 | head -c 1 | tr [:lower:] [:upper:] ; printf $1 | tail -c +2
}

format_raw2csv_names () {

	# first letter of first word is always uppercase
	capitalize $1
	# does the string has more than one word
	if [ $# -gt 1 ];
	then
		printf " "
		# only process succesive words, leaving out the first
		shift

		for w in $@;
		do
			case "$w" in
				"el"|"la"|"lo"|"los"|"las"|"de"|"del")
					printf "%s" $w
					;;
				*)
					capitalize $w
					;;
			esac

			[ $# -ne 1 ] && printf " "

			shift
		done
	fi
	# end with a carriage jump
	#echo
}

parser_raw2csv() {

	for i in $( cat "$COORDINATES_CSV" | tr " " "_" );
	do
		wp_id_province=$( printf %s $i | cut -d ";" -f 1 )
		wp_id_number=$( printf %s $i | cut -d ";" -f 2 )
		wp_name=$( printf %s $i | cut -d ";" -f 3 | tr "_" " " | tr -d "-" | tr [:upper:] [:lower:] )

		wp_name_formatted=$( format_raw2csvi_names $wp_name )

		wp_latitude=$( printf %s $i | cut -d ";" -f 4 )
		wp_lat_sign=$( printf %s $wp_latitude | cut -d _ -f 4 )
		wp_lat_deg=$( printf %s $wp_latitude | cut -d _ -f 1 | tr -d "ยบ" | sed 's/^0*//' )
		wp_lat_min=$( printf %s $wp_latitude | cut -d _ -f 2 | tr -d "'" | sed 's/^0*//' )
		wp_lat_sec=$( printf %s $wp_latitude | cut -d _ -f 3 | tr -d "'" | sed 's/^0*//' )	

		wp_longitude=$( printf %s $i | cut -d ";" -f 5 )
		wp_lon_sign=$( printf %s $wp_longitude | cut -d _ -f 4 )
		wp_lon_deg=$( printf %s $wp_longitude | cut -d _ -f 1 | tr -d "ยบ" | sed 's/^0*//' )
		wp_lon_min=$( printf %s $wp_longitude | cut -d _ -f 2 | tr -d "'" | sed 's/^0*//' )
		wp_lon_sec=$( printf %s $wp_longitude | cut -d _ -f 3 | tr -d "'" | sed 's/^0*//' )	

		printf "\"%s%s\";\"%s\";" $wp_id_province $wp_id_number "$wp_name_formatted" 
		printf "\"%s\";%d;%d;%d;" $wp_lat_sign $wp_lat_deg $wp_lat_min $wp_lat_sec
		printf "\"%s\";%d;%d;%d\n" $wp_lon_sign $wp_lon_deg $wp_lon_min $wp_lon_sec
	done
}

parser_csv2gpx() {

	COORDINATES_GPX=$( basename "$COORDINATES_CSV" .csv ).gpx

	[ "$CLEAN" == "FALSE" ]	&& printf "\e[33m-->\e[0m Parsing \e[36m%s\e[0m into GPS eXchange Format:\n\n" "$COORDINATES_GPX"

	printf "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n"	
	printf "<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"%s script v%s\" xmlns=\"http://www.topografix.com/GPX/1/1\">\n" $( capitalize $SCRIPT_NAME ) $SCRIPT_VERSION

	for i in $( cat "$COORDINATES_CSV" | tr ' ' _ );
	do
		wp_id=$( printf %s $i | cut -d ";" -f 1 | tr -d \" )
		wp_name=$( printf %s $i | cut -d ";" -f 2 | tr -d \" )

		wp_lat_hemisphere=$( printf %s $i | cut -d ";" -f 3 | tr -d \" )
		wp_lat_deg=$( printf %s $i | cut -d ";" -f 4 )
		wp_lat_min=$( printf %s $i | cut -d ";" -f 5 )
		wp_lat_sec=$( printf %s $i | cut -d ";" -f 6 )
		case "$wp_lat_hemisphere" in
			"N" | "n" )
				wp_lat_sign=1
				;;
			"S" | "s" )
				wp_lat_sign=-1
				;;
			*)
				printf "\e[31m-!> ERROR:\e[0m Latitude must be either NORTH or SOUTH. Abort\n"
				exit 1
				;;
		esac		
		wp_latitude=$( echo scale=8 \; $wp_lat_sign \* $wp_lat_deg + $wp_lat_min / 60 + $wp_lat_sec / 3600 | bc -l | tr . , )

		wp_lon_hemisphere=$( printf %s $i | cut -d ";" -f 7 | tr -d \" )
		wp_lon_deg=$( printf %s $i | cut -d ";" -f 8 )
		wp_lon_min=$( printf %s $i | cut -d ";" -f 9 )
		wp_lon_sec=$( printf %s $i | cut -d ";" -f 10 )
		case "$wp_lon_hemisphere" in
			"E" | "E" )
				wp_lon_sign=1
				;;
			"W" | "W" )
				wp_lon_sign=-1
				;;
			*)
				printf "\e[31m-!> ERROR:\e[0m Longitude must be either EAST or WEST. Abort\n"
				exit 1
				;;
		esac
		wp_longitude=$( echo scale=8 \; $wp_lon_sign \* $wp_lon_deg + $wp_lon_min / 60 + $wp_lon_sec / 3600 | bc -l | tr . , )

		# spanish LANG/LOCALE makes us use "," as delimiter. Now we should go back to "." as decimal notator
		wp_latitude_fixed=$( printf "%.8f" $wp_latitude | tr , . )
		wp_longitude_fixed=$( printf "%.8f" $wp_longitude | tr , . )

		printf "  <wpt lat=\"%s\" lon=\"%s\">\n"  "$wp_latitude_fixed" "$wp_longitude_fixed"
		printf "    <name>%s %s</name>\n" "$wp_id" "$( printf "%s" $wp_name | tr _ ' ' )"
		printf "    <sym>Circle</sym>\n"
		printf "    <extensions>\n      <identifier />\n      <category />\n    </extensions>\n"
		printf "  </wpt>\n"
	done

	printf "</gpx>\n"	
}

parser_csv2kml() {

	COORDINATES_GPX=$( basename "$COORDINATES_CSV" .csv ).gpx

	[ "$CLEAN" == "FALSE" ]	&& printf "\e[33m-->\e[0m Parsing \e[36m%s\e[0m into GPS eXchange Format:\n\n" "$COORDINATES_GPX"

	printf "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"	
	printf "<kml xmlns=\"http://www.opengis.net/kml/2.2\">"
	printf "  <Document>\n"

	for i in $( cat "$COORDINATES_CSV" | tr ' ' _ );
	do
		wp_id=$( printf %s $i | cut -d ";" -f 1 | tr -d \" )
		wp_name=$( printf %s $i | cut -d ";" -f 2 | tr -d \" )

		wp_lat_hemisphere=$( printf %s $i | cut -d ";" -f 3 | tr -d \" )
		wp_lat_deg=$( printf %s $i | cut -d ";" -f 4 )
		wp_lat_min=$( printf %s $i | cut -d ";" -f 5 )
		wp_lat_sec=$( printf %s $i | cut -d ";" -f 6 )
		case "$wp_lat_hemisphere" in
			"N" | "n" )
				wp_lat_sign=1
				;;
			"S" | "s" )
				wp_lat_sign=-1
				;;
			*)
				printf "\e[31m-!> ERROR:\e[0m Latitude must be either NORTH or SOUTH. Abort\n"
				exit 1
				;;
		esac		
		wp_latitude=$( echo $wp_lat_sign \* \( $wp_lat_deg + \( $wp_lat_min / 60 \) + \( $wp_lat_sec / 3600 \) \) | bc -l | tr . , )

		wp_lon_hemisphere=$( printf %s $i | cut -d ";" -f 7 | tr -d \" )
		wp_lon_deg=$( printf %s $i | cut -d ";" -f 8 )
		wp_lon_min=$( printf %s $i | cut -d ";" -f 9 )
		wp_lon_sec=$( printf %s $i | cut -d ";" -f 10 )
		case "$wp_lon_hemisphere" in
			"E" | "E" )
				wp_lon_sign=1
				;;
			"W" | "W" )
				wp_lon_sign=-1
				;;
			*)
				printf "\e[31m-!> ERROR:\e[0m Longitude must be either EAST or WEST. Abort\n"
				exit 1
				;;
		esac
		wp_longitude=$( echo $wp_lon_sign \* \( $wp_lon_deg + \( $wp_lon_min / 60 \) + \( $wp_lon_sec / 3600 \) \) | bc -l | tr . , )

		# spanish LANG/LOCALE makes us use "," as delimiter. Now we should go back to "." as decimal notator
		wp_latitude_fixed=$( printf "%.8f" $wp_latitude | tr , . )
		wp_longitude_fixed=$( printf "%.8f" $wp_longitude | tr , . )

		printf "    <Placemark>\n"
		printf "      <name>%s %s</name>\n" "$wp_id" "$( printf "%s" $wp_name | tr _ ' ' )"
		printf "      <description>%s</description>\n" "$( printf "%s" $wp_name | tr _ ' ' )"
		printf "      <Point>\n"
		printf "        <coordinates>%s,%s</coordinates>\n" "$wp_longitude_fixed" "$wp_latitude_fixed"
		printf "      </Point>\n"
		printf "    </Placemark>\n"
	done
	
	printf "  </Document>\n"
	printf "</kml>\n"	
}

# ---------------------------------------------------------------------------------------
#  Main block
# ---------------------------------------------------------------------------------------

main() {
	check_args "$@"
	defaults
	check_essentials
	version
	action
}

# ---------------------------------------------------------------------------------------
#  Main call
# ---------------------------------------------------------------------------------------

main "$@"
